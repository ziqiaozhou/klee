#include <stdio.h>
#include <stdint.h>
#define get8bits(d) (*((const uint8_t *) (d)))
#define bitwidth 8
typedef uint8_t bittype;
char * hash(char* result,char * key,char * data,int n,int m){
	if (n <= 0 || data == NULL) return 0;
	int i,j,k,l;
	bittype onebit,aAndy,axory,aAndy0,axory1;

	for (i=0;i<m;i++){
		bittype * result_i_ptr=&result[i];
		for(k=0;k<8;k++){
			axory=(0x1&key[k+8*i+0]&data[0]);
			for(l=0;l<n;l++){
				bittype y=data[l];
				bittype a=key[k+8*i+l];
				aAndy=(a&y);
				while(aAndy>0){
					axory^=aAndy&1;
				}
			}
			(*result_i_ptr)|=axory<<i;
		}

	}

}

int main(int argc,char **argv){
	int n=4,m=3;
	char key[24*4];
	//28, 9-10=0
unsigned int x=0b1010101010101010100101010101;
for(int i=0;i<24){
	memcpy(&key[i*4],&x,sizeof(long))
}
	klee_make_symbolic(key,24*4,"a");
	char data[4];
	unsigned long result;
	klee_make_symbolic(data,4,"y");
	hash(&result,key,data,n,m);
	if(result<200 && result>100){
		return 0;
	}
	return 1;

}
